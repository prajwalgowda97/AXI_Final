
#
# Mnemonic Maps
#
mmap new -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

array unset createdGroup
array set createdGroup {}
#
# Groups
#
if {[catch {group get -using [list Write Addres]}]} {
set createdGroup([list Write Addres]) 1
catch {group new -name {Write Addres} -overlay 0}
}
if {[catch {group get -using [list Write Data]}]} {
set createdGroup([list Write Data]) 1
catch {group new -name {Write Data} -overlay 0}
}
if {[catch {group get -using [list Write Response]}]} {
set createdGroup([list Write Response]) 1
catch {group new -name {Write Response} -overlay 0}
}
if {[catch {group get -using [list Read Address]}]} {
set createdGroup([list Read Address]) 1
catch {group new -name {Read Address} -overlay 0}
}
if {[catch {group get -using [list Read Data]}]} {
set createdGroup([list Read Data]) 1
catch {group new -name {Read Data} -overlay 0}
}
if {[catch {group get -using [list dut signals]}]} {
set createdGroup([list dut signals]) 1
catch {group new -name {dut signals} -overlay 0}
}
if {[catch {group get -using [list Group 1]}]} {
set createdGroup([list Group 1]) 1
catch {group new -name {Group 1} -overlay 0}
}
if {[info exists createdGroup([list Write Addres])]} {
group using {Write Addres}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {axi_top.dut.AWVALID}]} ] \
    [subst  {[format {axi_top.dut.AWREADY}]} ] \
    [subst  {[format {axi_top.dut.AWID[3:0]}]} ] \
    [subst  {[format {axi_top.dut.AWADDR[31:0]}]} ] \
    [subst  {[format {axi_top.dut.AWLEN[7:0]}]} ] \
    [subst  {[format {axi_top.dut.AWSIZE[2:0]}]} ] \
    [subst  {[format {axi_top.dut.AWBURST[1:0]}]} ]
}

if {[info exists createdGroup([list Write Data])]} {
group using {Write Data}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {axi_top.dut.WVALID}]} ] \
    [subst  {[format {axi_top.dut.WREADY}]} ] \
    [subst  {[format {axi_top.dut.WDATA[31:0]}]} ] \
    [subst  {[format {axi_top.dut.WLAST}]} ] \
    [subst  {[format {axi_top.dut.WSTRB[3:0]}]} ]
}

if {[info exists createdGroup([list Write Response])]} {
group using {Write Response}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {axi_top.dut.BVALID}]} ] \
    [subst  {[format {axi_top.dut.BREADY}]} ] \
    [subst  {[format {axi_top.dut.BID[3:0]}]} ] \
    [subst  {[format {axi_top.dut.BRESP[1:0]}]} ]
}

if {[info exists createdGroup([list Read Address])]} {
group using {Read Address}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {axi_top.dut.ARVALID}]} ] \
    [subst  {[format {axi_top.dut.ARREADY}]} ] \
    [subst  {[format {axi_top.dut.ARID[3:0]}]} ] \
    [subst  {[format {axi_top.dut.ARADDR[31:0]}]} ] \
    [subst  {[format {axi_top.dut.ARLEN[7:0]}]} ] \
    [subst  {[format {axi_top.dut.ARSIZE[2:0]}]} ] \
    [subst  {[format {axi_top.dut.ARBURST[1:0]}]} ]
}

if {[info exists createdGroup([list Read Data])]} {
group using {Read Data}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {axi_top.dut.RVALID}]} ] \
    [subst  {[format {axi_top.dut.RREADY}]} ] \
    [subst  {[format {axi_top.dut.RID[3:0]}]} ] \
    [subst  {[format {axi_top.dut.RDATA[31:0]}]} ] \
    [subst  {[format {axi_top.dut.RLAST}]} ] \
    [subst  {[format {axi_top.dut.RRESP[1:0]}]} ]
}

if {[info exists createdGroup([list dut signals])]} {
group using {dut signals}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {axi_top.dut.write_addr.awaddr[31:0]}]} ] \
    [subst  {[format {axi_top.dut.read_address.araddr[31:0]}]} ] \
    [subst  {[format {axi_top.dut.read_data.rdata[31:0]}]} ] \
    [subst  {[format {axi_top.dut.read_data.rresp[1:0]}]} ]
}

if {[info exists createdGroup([list Group 1])]} {
group using {Group 1}
group set -overlay 0
group set -comment {}
group clear 0 end

}

set id [waveform add -signals [subst  {
	{[format {axi_top.dut.CLK}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {axi_top.dut.RST}]}
	} ]]
set id [waveform add -cdivider divider]

set groupId0 [waveform add -groups {{Write Addres}}]

set id [waveform add -cdivider divider]

set groupId0 [waveform add -groups {{Write Data}}]

set id [waveform add -cdivider divider]

set groupId0 [waveform add -groups {{Write Response}}]

set id [waveform add -cdivider divider]

set groupId0 [waveform add -groups {{Read Address}}]

set id [waveform add -cdivider divider]

set groupId0 [waveform add -groups {{Read Data}}]

set id [waveform add -cdivider divider]

set groupId0 [waveform add -groups {{dut signals}}]

set id [waveform add -signals [subst  {
	{[format {axi_top.dut.mem_rd_addr[31:0]}]}
	} ]]

waveform xview limits 0 142ns
